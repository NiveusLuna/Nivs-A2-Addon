// Name used to refer to the race in the code and scripts.
name = "cardassian"

// Name displayed in the interface for this race.
displayKey = "GUI_RD_CARDASSIAN"

// Instant action slot, negative means not playable
instantActionSlot = 4

// Name of the interface configuration and sprite files.
interfaceConfiguration = "gui_cardassian.cfg"
interfaceSprites = "gui_cardassian.spr"

// Label for admirals log creation
creationLabel = "ADM_COMMISSIONED"
recycledLabel = "ADM_DECOMMISSIONED"

// Music play list.
singlePlayerMusic = ""
multiPlayerMusic = "mcarmp300.wav"

// Transporter sprite
transportSprite = "ctransport"

// How quickly this race repairs.  Bigger is slower.
repairStrength = 4.0f

// How strong this race is when fighting as a boarding party or
// against a boarding party.
boardingStrength = 0.75f

// When this race will retreat from battle
retreatStrength = 0.05f//shield percentage
crewRetreatRatio = 0.10f //crew percentage

//number of crew added to the team per second per starbase
//also used for planetary civilian populations.
crewAccumulationRate = 4.0

//the modifier for the crewAccumulationRate for a starbase if it is close to a planet
planetCrewAccumulationModifier = 1.25

// Names of the city and atmosphere textures, "" means no city or atmosphere change
// we are generic "eco nasty"
cityTextureName = "ECNA"
// was ECNA but we're getting rid of polution state.
atmosphereTextureName = ""

// atmosphere tint (ugly yellow)
atmosphereTint = 0.6 0.8 0.1
//atmosphereTint = 1.0 1.0 1.0

// # of cities in the city texture
numCities = 35.0

//**********************************************************************
//CREW STATUS MULTIPLIERS
//The percentage at which the crew enters yellow status (ex. 0.75f)
crewYellowStatus = 0.5f

//The percentage at which the crew enters red status (ex. 0.25f)
crewRedStatus = 0.25f

//The multiplier for the repair time while in yellow status
repairYellow = 1.5f

//The multiplier for the repair time while in red status
repairRed = 2.0f

//The multiplier for the delay between shots for weapons while in yellow status
weaponYellow = 1.5f

//The multiplier for the delay between shots for weapons while in red status
weaponRed = 2.0f

//***************************
//ODF for officer upgrade for starbases
officerUpgradeODF = "cardoff"

// the things you get when you ask for minimal default units (instead of the map units)
minimalUnits1 = "cconst.odf"	// construction ship

// the things you get when you ask for standard default units (instead of the map units)
standardUnits1 = "cconst.odf"	// construction ship
standardUnits2 = "cconst.odf"	// construction ship
standardUnits3 = "cbase.odf"	// starbase
standardUnits4 = "cscout.odf"	// starbase

// the things you get when you ask for superside units (instead of the map units)
superUnits1 = "bconst.odf"	// borg construction ship
superUnits2 = "fconst.odf"	// federation construction ship
superUnits3 = "kconst.odf"	// klingon construction ship
superUnits4 = "rconst.odf"	// romulan construction ship
superUnits5 = "cconst.odf"	// cardassian construction ship

// Multiplayer AI behavior
// Do we transport to help our friends when not on easy
transportToFriendsOnNotEasy = 1
transportToEnemyOnHard = 0

// The cardassians are sub standard at recycling
// Recycling efficiency
recycleDilithiumFraction = .7
recycleMetalFraction = .7

// How relatively fast we mine any resource
miningRateModifier = 1.25

// what event should we use when we run out of officers?
insufficientOfficersEvent = "InsufficientCardOfficers"

// for normal and lots of resource games, we need to specify how much
// of each resource this race should get

// NORMAL
normalDilithium = 3500
normalMetal = 2000
normalLatinum = 500
normalCrew = 1200

// LOTS
lotsDilithium = 30000
lotsMetal = 30000
lotsLatinum = 30000
lotsCrew = 30000
